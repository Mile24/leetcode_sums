Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.

 

Example 1:

Input: nums = [3,0,1]
Output: 2
Explanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.
Example 2:

Input: nums = [0,1]
Output: 2
Explanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.
Example 3:

Input: nums = [9,6,4,2,3,5,7,0,1]
Output: 8
Explanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.
---------------------------------------------------------------------------------------------------------------

solution:

explanation:
// find the sum of all the element in array
// substract from the n(n+1)/2;
// it will result in missing element or number;

code:
class Solution {
public:
    int missingNumber(const vector<int>& nums) {
        int sum = 0;
        for (int num : nums) {
            sum += num;
        }

        int size = nums.size();

        return (size + 1) * size / 2 - sum;
    }
};
----------------------------------------------------------------------------------------------------------------

case 2:
bit manipulation
// use xor gate for the finding the duplicate element
// xor the element value and also index value separately
// finally the xor the index value xor with n
// make xor1 ^ xor2 // it will return the missing element in the array

code:
class Solution {
public:
    int missingNumber(vector<int>& nums) {
        
        int n= nums.size();
        int xor1=0;
        int xor2 =0;
        for(int i=0; i<n;i++)
        {
            xor2= xor2^ nums[i];
            xor1 = xor1 ^ i;

        }

        xor1 = xor1^ n;

        return (xor1^xor2);
        

    }
};
 

