Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.
You must implement a solution with a linear runtime complexity and use only constant extra space.
Example 1:
Input: nums = [2,2,1]
Output: 1
-------------------------------------------------------------------------------------------
solution:

//use the xor bit for find the single element in array
// it will works only if it contain only one single element 
// if the same element present in even order then it will be equal to 0;
explaination of the  example
2, 2, 1
2^2 =0
0^1 = 1;
-------------------------------------------------------------------------------------------
code:
class Solution {
public:
    int singleNumber(vector<int>& nums) {
int xor1 = 0;
for(int i=0; i<nums.size();i++)
{
	xor1 = xor1^nums[i];
}
return xor1;  
    }
};
-----------------------------------------------------------------------------------------
case 2:
// use the hashmap for counting the number of element 
// if the count of the element is equal to one  then we will return the element value;
// else we will return the value of 0;
class Solution {
public:
    int singleNumber(vector<int>& v) {
        map<int, int> mapp;
        for(auto ch: nums)
        {
          mapp[i]++;
        
        }
        
        for(auto ch: mapp)
        {
        	if(ch.second ==1)
        	{
        	return ch.first;
        
        	}
        
        }
        return 0;
}
};
---------------------------------------------------------------------------------------------



