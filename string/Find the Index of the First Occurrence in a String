Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.

 --------------------------------------------------------------------------------------------------

Example 1:
--------------------------------------------------------------------------------------------------
Input: haystack = "sadbutsad", needle = "sad"
Output: 0
Explanation: "sad" occurs at index 0 and 6.
The first occurrence is at index 0, so we return 0.
Example 2:

Input: haystack = "leetcode", needle = "leeto"
Output: -1
--------------------------------------------------------------------------------------------------
Intuition
we need to find the occurrence of the element in the given array of string. If we encounter the element in array 
which matches with the first element in array then will continue to check the next sequence of the element which is present in array. 
If it found then check till the entire substring character is present or not. If not found then we will check from next index of i.
--------------------------------------------------------------------------------------------------
Approach
first step to know about the size of both array which will help in transerval in given array.
check whether the substring is greater than entire array, If it is true then return -1.
we will iterate the entire array to find the occur of the element in array. till the condition n-m.
intialize the variable j =0;
use another loop to check the consquence element is found or not in array. if it found then increment the value of j when the condition get fails then
check the whether count of j is equal to the value of substring. if it true then return the index value of i.
finally return -1; which will be used when the substring is not found.
--------------------------------------------------------------------------------------------------
Explanation:
Input: haystack = "sadbutsad", needle = "sad"

size of n = 9 and m =3
for loop will iterate till 6 based on the condition n-m;
check j<m ie 0<3 true && haystack[0+0] == needle[0] true then increment j;
j<m ie 1<3 && haystack[0+1] == needle[1] true then increment the value of j
j<m ie 2<3 && haystack[0+2] == needle[2] true then increment the value of j.
It will check the condition that j == m ie true then it will return index value of i.
--------------------------------------------------------------------------------------------------
Complexity
Time complexity:
O(n*m)
where n is the size of given array while the m is substring of array.

Space complexity:
O(1)
Code
class Solution {
public:
    int strStr(string haystack, string needle) {
        int n = haystack.size();
        int m = needle.size();
        if(n<m)return -1;

        for(int i =0; i<=n-m ; i++)
        {
            int j =0;

            while(j<m && haystack[i+j] == needle[j])
            {
                j++;
            }
            if(j == m)return i;

            
        }
        return -1;

    }
};
--------------------------------------------------------------------------------------------------
















class Solution {
public:
    int strStr(string haystack, string needle) {
        if(haystack.find(needle)!=string::npos)
        {
            return haystack.find(needle);
        }
        else
        {
            return -1;
        }
    }
};
