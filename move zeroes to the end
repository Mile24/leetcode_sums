Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Note that you must do this in-place without making a copy of the array.
----------------------------------------------------------------------------------------------------
 Example 1:

Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]
Example 2:

Input: nums = [0]
Output: [0]
----------------------------------------------------------------------------------------------------
explanation:
move the zeros to the right of the array
// using two pointer
// intialise one variable with initial value of array 
// If the element value is equal to 0 then initial the index value to new variable and then increment value of i; 
//  find the non zero using the i if it found then swap the element with the help of index value of i and j


Code:

class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        int i=0,j=0;
        int n= nums.size();
        while(i<n && j<n){
        if(nums[i]==0 && nums[j]!=0){
          nums[i]=nums[j];
          nums[j] = 0;
        }else if(nums[i]!=0 && nums[j]==0){
            i++;
        }else j++;
    }
    }
};

explanation:
//initial the value of i and j = 0;
// find the entire array size;
// iterate the entire array with help of two variable;
if (i element value is equal to zero and j element value is not equal to zero then swap the element 
// if (nums[i] != 0 and nums[j] ==0;
// increment the i value
// else increment the value of j;

---------------------------------------------------------------------------------------------------

case 2:
//store the postiive value in the array and fill the remaining position with value zero.
 
class Solution {
public:
    void moveZeroes(vector<int>& nums) {
  

    int n = nums.size();
    int i =0;
        for(int j=0; i<n; j++)
        {
        	if(nums[j]!=0)
        	{
        		nums[i] = nums[j];
        		i++;
        	}
        
        }

    for(int k =i; k< n; i++)
    {
    	nums[k] = 0;
    
    }

}
};
