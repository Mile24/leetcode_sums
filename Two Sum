
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.

Example 1
Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

solution:
It can be done by using the two pointer, unordered_map.

two pointer solution:
//intialize two variable 
i= starting index, j = ending index;
use while loop with condition (i<=j)
check the condition that 
if(num[i] + nums[j] == target)
return index of i and j {i, j};
else if (num[i] + nums[j] > target)
decrement j--;
elseif num[i] + nums[j] < target)
increment i++;

// if not found then return the value as 0;
----------------------------------------------------------------------------------------
code
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
	int i= 0;
	int j = nums.size()-1;
	while(i<=j)
	{
	if (nums[i]+nums[j] ==k)return {i, j};
	else if (nums[i]+nums[j]> k) j--;
	else i++;

	}
	return 0;

}

------------------------------------------------------------------------------------------------
ordered_map
we will use the unordered hashmap to store the value and index value  of element in the array 
// we will find the required value in the unordered_map  
// if it found then will return the index of the found element and initial index value;
 
condtion 
if(mapp.count(comp)) return { mapp[comp], i};
// if not found then we will store the count in the unordered map with its index value ;
mapp[nums[i]]=i;


----------------------------------------------------------------------------------------------------
Code:

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
	unordered_map<int, int> mapp;

		for(int i=0; i<nums.size();i++)
		{
			int required = target - nums[i];
			if (mapp.count[required] !=0) return { mapp[required], i};
			mapp[nums[i]] =i;
		
		}
	return {};

}

----------------------------------------------------------------------------------------------------

Brute force 

// using two for loop for the trasveral in the array 

for(int i=o -> n)
	for(int j =1 ->n)
{
int sum = nums[i]+nums[j};
	if (sum == target) return {i, j};

}

return {};
-----------------------------------------------------------------------------------------------------
