You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.
Merge nums1 and nums2 into a single array sorted in non-decreasing order.
The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

Example 1:
Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1
------------------------------------------------------------------------------------------------
solution:

// the size of the array will be lesser than the size of first array
// transveral both the array from the end of it
// if the value of nums1[i] >nums2[j] then  we will swap the element of nums[1] into nums[2] 
//decrement the value of i-- inside the ifcondition
//else break;
// inside the while loop decrement the value of j--;
//finally push the element of nums[j] into the end of the num1;
code:
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int i = m-1;
        int j =0;

        while(i>=0 && j<= n)
        {
            if(nums1[i]>nums2[j])
            {
                swap(nums1[i],nums2[j]);
                i--;

            }
            else
            {
            break;
            }
            j++;

        }
        
// store the element of nums2 into nums1;

        for(int k=i+1;k< m+n;k++)
        {
            nums1[k]= nums2[j];
            j++;
        }
        
    }
};

-----------------------------------------------------------------------------------------------------------------
explanation:

// initialize the size of variable to size of both array by sum the size
// check whether the last element of the nums1 and nums2 
// if the value of the nums1 is greater than nums2 then push the element back into the nums1[k--] of the increased size array and decrement the value of i--;
//else push the element of nums2 into the num1[k--] and then decrement the value of the j--;

class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        
        int i=m-1;
        int j=n-1;
        int k= m+n-1;

        while(j>=0)
        {
           if(i>=0 &&nums1[i]>nums2[j])
           {
               nums1[k--]= nums1[i--];

           } 
           else
           {
               nums1[k--]= nums2[j--];
           }
        }
    }
};
